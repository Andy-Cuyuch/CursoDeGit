Comandos Git 

Estos son algunos de los comandos mas importantes de Git cada uno puede ser utilizado para una tarea 

git init : Comando que inicializa un repositorio 

git add  : Comando que pasa todos los archivos modificados al stagen 

git commit -m "[UPDATE] Mensaje" : Es un registro o instantanea de los cambios de nuestro repositorio

git push oringin rama : Es un comando que git utiliza para enviar o empujar tus cambios que tenes un local a un repo remoto 

git pull : No ayuda a traer los cambios desde un repositorio remoto y fucionarlos

git clone url : Es un comando que nos ayuda a clonar diferentes repositorios y tenerlos en  local 

git status : Comando que nos muestra el proceso de nuestro archivos o todo lo que esta afuera de stagen 

git log : Se utiliza para mostrar el historial de commits en nuestro repositorio

git branch : Es un comando que podemos utilizar de mucho como por Ejemplo : [Ver la lista de ramas o crear una rama] 

git checkout : Es un comando que nos ayuda a pasar de diferentes ramas 

git merge : Es un comando que nos permite fusionar ramas Usualmente se usa para fusionar una rama de desarrollo en una rama principal.

git tag : Crea etiquetas (tags) para marcar commits especificos, com versiones de lanzamiento

git config : Configura opciones de git, como nombre de usaurio, direccion de correo
electronico, alias etc.

git rebase : Reorganiza el historial de commits, moviendo o combinando commits para crear
una linea de tiempo mas limpia y lineal 


Comandos hora laboral 


Problema :
Te piden que clones el repositorio y cuando lo hagas crees una rama con tu nombre y trabajes en ella 

1. Clonar el repositorio 

-- git clone copy url 

2. Creancion de la rama 

-- git checkout -b nombre-rama 

Problema :

Se necesita que configures la parte del usuario o email de github 

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com 


Problema 2 : 

Ya casi es hora de salida !! y te piden que subas tus cambios antes de irte  como lo harias?

 -- Git checkout nombre-rama 

 -- git add . 

 -- git commit -m "Mensaje de lo que hiciste en el dia"

 -- git push origin nombre-rama 

Problema 3 : 

llegas al dia siguiente y te das cuenta que hicieron cambios en la rama llamada develop y te dicen que bajes cambios 

1. asugurate de no tener cambios en tu rama 

-- git checkout develop 

-- git pull origin develop  (bajas los cambios)

-- git merge nombre-rama (unes tu rama con la develop si es necesario o no es opcional)

-- git push oringin develop 

2. ahora bien te pasas a tu rama 

-- git checkout nombre-rama 

-- git merge develop 

-- git push origin acuyuch

Problema 3 :

Se requiere revisar el historial del commit (como lo harias)

-- git log 






